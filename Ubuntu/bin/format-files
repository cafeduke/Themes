#!/bin/bash

# -------------------------------------------------------------------------------------------------
# Functions
# -------------------------------------------------------------------------------------------------
BASEDIR=$(dirname $(readlink -f ${0}))
BASENAME=$(basename ${0})

function usage {
  echo "Format files by finding and replacing patterns in filename"
  echo ""
  echo "Usage: ${BASENAME} [--find <find>] [--replace <replace>] [--rm <remove...>] [--dir <directory>] [--regex] [--recur]"
  echo "  find    : String to find in the file's name. Optional. Defaults to ''"
  echo "  replace : String to replace in the file's name. Optional. Defaults to ''"
  echo "  rm      : String(s) to remove. Optional. Defaults to ''"
  echo "  dir     : Dir to find files. Defaults to PWD."
  echo "  regex   : Do a regular expression find/replace. Optional. Disabled by default."
  echo "  recur   : Do a recursive search for all files in <dir>. Optional. Disabled by default."
}

function dieUsage {
  local mesg=${1}
  echo "Error: ${1}"
  usage
  exit 1
}

# -------------------------------------------------------------------------------------------------
# Parse Arg
# -------------------------------------------------------------------------------------------------
if [[ ${#} -eq 1 && ("${1}" == "--help" || "${1}" == "-h") ]]
then
  usage
  exit 0
fi

# Create associative array and set defaults
declare -A arg
arg["find"]=""
arg["replace"]=""
arg["rm"]=""
arg["dir"]="${PWD}"
arg["recur"]="false"
arg["regex"]="false"

while [[ ${#} -gt 0 ]]
do
  case "$1" in
    --find|--dir|--replace)
      key=$(echo "${1}" | sed "s%^--%%")
      arg[$key]="${2}"
      shift 2
    ;;

    --rm)
      key=$(echo "${1}" | sed "s%^--%%")
      shift
      while [[ ${#} -gt 0 && ! "${1}" =~ ^-- ]]
      do
        arg[$key]="${arg[$key]} ${1}"
        shift
      done
      arg[$key]=$(echo "${arg[$key]}" | sed -re "s%^\s+%%" | sed -re "s%\s+$%%")
    ;;

    --recur|--regex)
      key=$(echo "${1}" | sed "s%^--%%")
      arg[$key]="true"
      shift
    ;;

    *)
      dieUsage "Unknown arg $1"
    ;;

  esac
done

# Get values
find=${arg["find"]}
replace=${arg["replace"]}
dir=${arg["dir"]}
rm=${arg["rm"]}
recur=${arg["recur"]}
regex=${arg["regex"]}

cmd="find ${dir} -maxdepth 1 -type f"
if [[ "$recur" == "true" ]]
then
  cmd="find ${dir} -type f"
fi

# Sample command to process output of command line by line:
# while read -r line; do  echo $line; done < <(command)
while read file
do
  newFilePath=$(dirname "$(readlink -f "${file}")")
  newFile=$(basename "${file}")
  newFileExtn=$(echo "$newFile" | sed -re "s%.*\.%%")
  newFileBase=$(basename "$newFile" ".$newFileExtn")

  # find/replace
  if [[ ! -z "$find" ]]
  then
    if [[ "${regex}" == "true" ]]
    then
      newFileBase=$(echo ${newFileBase} | sed -re "s%$find%$replace%g")
    else
      newFileBase=$(echo ${newFileBase} | sed -e "s%$find%$replace%g")
    fi
  fi

  # Remove
  for x in $(echo "${rm}")
  do
    newFileBase=$(echo "${newFileBase}" | sed "s%$x%%")
  done

  # format space and other
  newFileBase=$(echo $newFileBase | tr -d \'\"\, | tr -s ". -" "_")
  newFile="${newFileBase}.${newFileExtn}"

  if [ ! -e "$newFile" ]
  then
    echo "Rename '"$(basename "${file}")"' as '$newFile'"
    mv "${file}" "${newFilePath}/${newFile}"
  fi
done < <(${cmd})
